
/*
Convert a Number to a String
In the previous two exercises, you developed functions that convert simple numeric strings to signed integers. In this exercise and the next, you're going to reverse those functions.

Write a function that converts a non-negative integer value (e.g., 0, 1, 2, 3, and so on) to the string representation of that integer.

You may not use any of the standard conversion functions available in JavaScript, such as String(), Number.prototype.toString, or an expression such as '' + number. Your function should do this the old-fashioned way and construct the string by analyzing and manipulating the number.

*/

/*
P:
- Input: An integer
- Output: A string
  - a string representation of input integer
-Rules:
  - The function should convert the input integers to string
  - Without using any buit-in methods
  - The digits of input integer is not matter 

D:
Array: to store the integers from the input

A:
- Initialize a const var called DIGITS to an array of strings representation of (number 0-9)
1. Create a function called integerToString(number)
2. Initialize result to empty string
3. Initialize remainder to the remainder of `number` by `10`
4. divide `number` by 10 and then rounded down to an integer number
5. reassign the `number` to the result of this expression
6. Add each current element from the `DIGITS` array with the `result`
7. Reassign the `result` variable to the result of this expression
8. Start repeataion from step 3 while the number is greater than 0

*/

const log = console.log;

const DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

function integerToString(number) {
  let result = '';

  do {
    let remainder = number % 10;
    number = Math.floor(number / 10);

    result = DIGITS[remainder] + result;
  } while (number > 0);

  log(result);
}

integerToString(4321);        // "4321"
integerToString(0);           // "0"
integerToString(5000);        // "5000"
integerToString(1234567890);  // "1234567890"






